// Generated by Dagger (https://dagger.dev).
package com.platzi.android.rickandmorty.usecases.di;

import com.platzi.android.rickandmorty.data.CharacterRepository;
import com.platzi.android.rickandmorty.usecases.GetAllCharactersUseCase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_GetAllCharacterUseCaseProviderFactory implements Factory<GetAllCharactersUseCase> {
  private final UseCaseModule module;

  private final Provider<CharacterRepository> characterRepositoryProvider;

  public UseCaseModule_GetAllCharacterUseCaseProviderFactory(UseCaseModule module,
      Provider<CharacterRepository> characterRepositoryProvider) {
    this.module = module;
    this.characterRepositoryProvider = characterRepositoryProvider;
  }

  @Override
  public GetAllCharactersUseCase get() {
    return getAllCharacterUseCaseProvider(module, characterRepositoryProvider.get());
  }

  public static UseCaseModule_GetAllCharacterUseCaseProviderFactory create(UseCaseModule module,
      Provider<CharacterRepository> characterRepositoryProvider) {
    return new UseCaseModule_GetAllCharacterUseCaseProviderFactory(module, characterRepositoryProvider);
  }

  public static GetAllCharactersUseCase getAllCharacterUseCaseProvider(UseCaseModule instance,
      CharacterRepository characterRepository) {
    return Preconditions.checkNotNull(instance.getAllCharacterUseCaseProvider(characterRepository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
