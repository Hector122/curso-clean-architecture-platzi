// Generated by Dagger (https://dagger.dev).
package com.platzi.android.rickandmorty.data.di;

import com.platzi.android.rickandmorty.data.CharacterRepository;
import com.platzi.android.rickandmorty.data.LocalCharacterDataSource;
import com.platzi.android.rickandmorty.data.RemoteCharacterDataSource;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_CharacterRepositoryProviderFactory implements Factory<CharacterRepository> {
  private final RepositoryModule module;

  private final Provider<RemoteCharacterDataSource> remoteCharacterDataSourceProvider;

  private final Provider<LocalCharacterDataSource> localCharacterDataSourceProvider;

  public RepositoryModule_CharacterRepositoryProviderFactory(RepositoryModule module,
      Provider<RemoteCharacterDataSource> remoteCharacterDataSourceProvider,
      Provider<LocalCharacterDataSource> localCharacterDataSourceProvider) {
    this.module = module;
    this.remoteCharacterDataSourceProvider = remoteCharacterDataSourceProvider;
    this.localCharacterDataSourceProvider = localCharacterDataSourceProvider;
  }

  @Override
  public CharacterRepository get() {
    return characterRepositoryProvider(module, remoteCharacterDataSourceProvider.get(), localCharacterDataSourceProvider.get());
  }

  public static RepositoryModule_CharacterRepositoryProviderFactory create(RepositoryModule module,
      Provider<RemoteCharacterDataSource> remoteCharacterDataSourceProvider,
      Provider<LocalCharacterDataSource> localCharacterDataSourceProvider) {
    return new RepositoryModule_CharacterRepositoryProviderFactory(module, remoteCharacterDataSourceProvider, localCharacterDataSourceProvider);
  }

  public static CharacterRepository characterRepositoryProvider(RepositoryModule instance,
      RemoteCharacterDataSource remoteCharacterDataSource,
      LocalCharacterDataSource localCharacterDataSource) {
    return Preconditions.checkNotNull(instance.characterRepositoryProvider(remoteCharacterDataSource, localCharacterDataSource), "Cannot return null from a non-@Nullable @Provides method");
  }
}
